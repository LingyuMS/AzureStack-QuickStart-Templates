{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Username for the Virtual Machine. Default value is localadmin"
      },
      "defaultValue": "localadmin"
    },
    "adminPassword": {
      "type": "securestring",
      "defaultValue": "[concat('Subscription#',substring(resourcegroup().id,15,36))]",
      "metadata": {
        "description": "Password for the Virtual Machine. Default value is 'Subscription#<subscription id>'"
      }
    },
    "imagePublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "Maps to the publisher in the Azure Stack Platform Image Repository manifest file Eg: Canonical, Suse, OpenLogic "
      }
    },
    "imageOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "Maps to the Offer in the Azure Stack Platform Image Repository manifest file Eg: UbuntuServer, SlesServer, CentOS "
      }
    },
    "imageSku": {
      "type": "string",
      "defaultValue": "16.04-LTS",
      "metadata": {
        "description": "Maps to the sku in the Azure Stack Platform Image Repository manifest file Eg: 12.SP1, 6.7 , 7.2"
      }
    },
    "vmSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "The size of the Virtual Machine."
      }
    },
    "ExistingDiagnosticResourceGroup": {
      "type": "string",
      "metadata": {
        "description": "The existing Resource Group that diagnostic storage account is in"
		}
     },
        "ExistingDiagnosticStorageAccount": {
            "type": "string",
            "metadata": {
                "description": "The existing Diagnostic Storage Account"
            }
        }
  },
  "variables": {
    "dnsNameForPublicIP": "[tolower(concat('dns', uniquestring(resourceGroup().id)))]",
    "location": "[resourceGroup().location]",
    "OSDiskName": "osdisk",
    "nicName": "[tolower(concat('nic',uniquestring(resourceGroup().id)))]",
    "addressPrefix": "10.0.0.0/24",
    "publicIpAddressType" : "Dynamic",
    "publicIpAddressName" : "[toLower(concat('pip', uniqueString(resourceGroup().id)))]",
    "subnetName": "[tolower(concat('subnet',uniquestring(resourceGroup().id)))]",
    "subnetPrefix": "10.0.0.0/24",
    "storageAccountName": "[concat('sa', uniquestring(resourceGroup().id))]",
    "storageAccountType": "Standard_LRS",
    "vmStorageAccountContainerName": "vhds",
    "vmName": "[substring(concat('simplelinuxvm',resourceGroup().Name),0,14)]",
    "virtualNetworkName": "[tolower(concat('vnet',uniquestring(resourceGroup().id)))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "networkSecurityGroupName": "[tolower(concat('nsg',uniquestring(resourceGroup().id)))]",
    "diagnosticsExtensionName": "LinuxDiagnostic",
    "diagnosticsStorageAccountId": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/',parameters('ExistingDiagnosticResourceGroup'), '/providers/','Microsoft.Storage/storageAccounts/', parameters('ExistingDiagnosticStorageAccount'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[toLower(variables('storageAccountName'))]",
      "apiVersion": "2015-05-01-preview",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('networkSecurityGroupName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
             "name": "default-allow-ssh",
             "properties": {
             "priority": 1000,
             "sourceAddressPrefix": "*",
             "protocol": "TCP",
             "destinationPortRange": "22",
             "access": "Allow",
             "direction": "Inbound",
             "sourcePortRange": "*",
             "destinationAddressPrefix": "*"
             }
          },
          {
             "name": "default-allow-remotedesktop",
             "properties": {
             "priority": 1010,
             "sourceAddressPrefix": "*",
             "protocol": "TCP",
             "destinationPortRange": "3389",
             "access": "Allow",
             "direction": "Inbound",
             "sourcePortRange": "*",
             "destinationAddressPrefix": "*"
             }
          }
        ]
      }
    },
    {
        "apiVersion": "2015-06-15",
        "type": "Microsoft.Network/publicIpAddresses",
        "name": "[variables('publicIpAddressName')]",
        "location": "[resourceGroup().location]",
        "properties": {
            "publicIpAllocationMethod": "[variables('publicIpAddressType')]"
        }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('nicName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/publicIpAddresses/', variables('publicIpAddressName'))]",
        "[concat('Microsoft.Network/networkSecurityGroups/', variables('networkSecurityGroupName'))]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('networkSecurityGroupName'))]"
        },
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
               "privateIPAllocationMethod": "Dynamic",
               "publicIpAddress": {
                   "id": "[resourceId(resourceGroup().Name,'Microsoft.Network/publicIpAddresses', variables('publicIpAddressName'))]"
               }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('vmName')]",
      "location": "[variables('location')]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[parameters('vmSize')]"
        },
        "osProfile": {
          "computerName": "[variables('vmName')]",
          "adminUsername": "[parameters('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[parameters('imagePublisher')]",
            "offer": "[parameters('imageOffer')]",
            "sku": "[parameters('imageSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "osdisk",
            "vhd": {
              "uri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob, variables('vmStorageAccountContainerName'),'/', variables('OSDiskName'), '.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": "true",
            "storageUri": "[concat(reference(concat('Microsoft.Storage/storageAccounts/', variables('storageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob)]"
          }
        }
      }
    },
	{
         "type": "Microsoft.Compute/virtualMachines/extensions",
         "name": "[concat(variables('vmName'),'/', variables('diagnosticsExtensionName'))]",
         "apiVersion": "2015-06-15",
         "location": "[variables('location')]",
         "properties": {
             "publisher": "Microsoft.OSTCExtensions",
             "type": "LinuxDiagnostic",
             "typeHandlerVersion": "2.3",
             "autoUpgradeMinorVersion": true,
             "settings": {
                 "StorageAccount": "[parameters('ExistingDiagnosticStorageAccount')]",
                  "sampleRateInSeconds": 15,
                  "ladCfg": {
                        "diagnosticMonitorConfiguration": {
                          "performanceCounters": {
                            "performanceCounterConfiguration": [
                              {
                                "unit": "Percent",
                                "type": "builtin",
                                "counter": "PercentProcessorTime",
                                "counterSpecifier": "/builtin/Processor/PercentProcessorTime",
                                "annotation": [
                                  {
                                    "locale": "en-us",
                                    "displayName": "Aggregate CPU %utilization"
                                  }
                                ],
                                "condition": "IsAggregate=TRUE",
                                "class": "Processor"
                              },
                              {
                                "unit": "Bytes",
                                "type": "builtin",
                                "counter": "UsedSpace",
                                "counterSpecifier": "/builtin/FileSystem/UsedSpace",
                                "annotation": [
                                  {
                                    "locale": "en-us",
                                    "displayName": "Used disk space on /"
                                  }
                                ],
                                "condition": "Name=\"/\"",
                                "class": "Filesystem"
                              }
                            ]
                          },
                          "metrics": {
                            "metricAggregation": [
                              {
                                "scheduledTransferPeriod": "PT1H"
                              },
                              {
                                "scheduledTransferPeriod": "PT1M"
                              }
                            ],
                            "resourceId": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().Name, '/providers/Microsoft.Compute/virtualMachines/', variables('vmName'))]"
                          },
                          "eventVolume": "Large",
                          "syslogEvents": {
                            "syslogEventConfiguration": {
                              "LOG_USER": "LOG_INFO"
                            }
                          }
                        }
                      },
                 "fileLogs": [
                     {
                         "file": "/var/log/myladtestlog",
                         "table": "MyLadTestLog"
                     }
                 ]
             },
             "protectedSettings": {
                 "storageAccountName": "[parameters('ExistingDiagnosticStorageAccount')]",
                 "storageAccountKey": "[listKeys(variables('diagnosticsStorageAccountId'),'2015-06-15').key1]",
                 "storageAccountEndPoint": "https://local.azurestack.external/"
             }
         },
         "dependsOn": [
             "[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]"
         ]
    }
  ]
}

